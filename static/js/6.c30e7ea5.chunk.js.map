{"version":3,"file":"static/js/6.c30e7ea5.chunk.js","mappings":"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","sources":["components/SearchList/SearchList.js","pages/Movies.js","services/Api-Service.js"],"sourcesContent":["import { useLocation, Link } from 'react-router-dom';\n\nexport const SearchList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <ul>\n        {movies.map(({ id, original_title }) => (\n          <li key={id}>\n            <Link to={`${id}`} state={{ from: location }}>\n              <p>{original_title}</p>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import { SearchList } from 'components/SearchList/SearchList';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMoviesSearch } from 'services/Api-Service';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  // const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!query) return;\n\n    const getMovies = async () => {\n      try {\n        const movies = await getMoviesSearch(query);\n\n        if (!movies.length) {\n          // setError('Sorry. There are no movies...');\n          return;\n        }\n        setMovies(movies);\n      } catch (error) {\n      } finally {\n      }\n    };\n    getMovies();\n  }, [query]);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n  };\n\n  const handleChange = evt => {\n    const query = evt.target.value;\n    if (query === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ query });\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          value={query}\n          autoComplete=\"off\"\n          autoFocus\n          onChange={handleChange}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {Movies && <SearchList movies={movies} />}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nimport defaultImg from '../img/default.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '12a1c9f7c08bf08c5c3c451723bbd88a';\n\nexport async function getTrending() {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport const getMovieDetails = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}?language=en-US&api_key=${API_KEY}`\n  );\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n  return {\n    poster_path: getPoster(poster_path),\n    original_title,\n    release_date: release_date.slice(0, 4),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(({ name }) => name).join(', '),\n  };\n};\n\nexport async function getMovieCast(movieId) {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?language=en-US&page=1&include_adult=false&api_key=${API_KEY}`\n  );\n  const credits = data.cast.map(({ id, name, profile_path }) => ({\n    id,\n    name,\n    profile_path: getPoster(profile_path),\n  }));\n  return credits;\n}\n\nexport async function getMovieReviews(movieId) {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?language=en-US&page=1&api_key=${API_KEY}`\n  );\n  const reviews = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n  return reviews;\n}\n\nexport async function getMoviesSearch(query) {\n  const { data } = await axios.get(\n    `/search/movie?query=${query}&language=en-US&page=1&include_adult=false&api_key=${API_KEY}`\n  );\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  console.log(movies);\n  return movies;\n}\n\nconst getPoster = url =>\n  url ? 'https://image.tmdb.org/t/p/w500' + url : defaultImg;\n"],"names":["SearchList","movies","location","useLocation","map","id","original_title","to","state","from","Movies","useState","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","getMovies","getMoviesSearch","length","onSubmit","evt","preventDefault","type","name","value","autoComplete","autoFocus","onChange","target","axios","API_KEY","getTrending","data","results","getMovieDetails","movieId","poster_path","release_date","vote_average","overview","genres","getPoster","slice","toFixed","join","getMovieCast","credits","cast","profile_path","getMovieReviews","reviews","author","content","console","log","url","defaultImg"],"sourceRoot":""}