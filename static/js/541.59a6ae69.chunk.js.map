{"version":3,"file":"static/js/541.59a6ae69.chunk.js","mappings":"yNA+CA,UA3Ca,WAEX,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAqBR,OAnBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAEA,IAAMG,EAAU,mCAAG,WAAMH,GAAN,iGAGOI,EAAAA,EAAAA,IAAaJ,GAHpB,OAGTF,EAHS,OAIfC,EAAWD,GACXO,QAAQC,IAAIR,GALG,qJAAH,sDAahBK,EAAWH,EAfS,CAgBrB,GAAE,CAACA,KAGF,gCACsB,IAAnBF,EAAQS,SAAgB,2DACxBT,IACC,wBACGA,EAAQU,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACxB,OACE,2BACE,gBAAKC,IAAKD,EAAcE,IAAKH,EAAMI,MAAM,SACzC,uBAAIJ,MAFGD,EAKZ,QAKV,C,wMC1CDM,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,wGACkBF,EAAAA,EAAAA,IAAA,sCAAyCC,IAD3D,uBACGE,EADH,EACGA,KACFC,EAASD,EAAKE,QAAQZ,KAAI,kBAA6B,CAC3DC,GAD8B,EAAGA,GAEjCY,eAF8B,EAAOA,eAAP,IAF3B,kBAMEF,GANF,kEASA,IAAMG,EAAe,mCAAG,WAAMtB,GAAN,qGACNe,EAAAA,EAAAA,IAAA,iBACXf,EADW,mCACuBgB,IAFjB,uBACrBE,EADqB,EACrBA,KAINK,EAMEL,EANFK,YACAF,EAKEH,EALFG,eACAG,EAIEN,EAJFM,aACAC,EAGEP,EAHFO,aACAC,EAEER,EAFFQ,SACAC,EACET,EADFS,OAV2B,kBAYtB,CACLJ,YAAaK,EAAUL,GACvBF,eAAAA,EACAG,aAAcA,EAAaK,MAAM,EAAG,GACpCJ,aAAcA,EAAaK,QAAQ,GACnCJ,SAAAA,EACAC,OAAQA,EAAOnB,KAAI,qBAAGE,IAAH,IAAoBqB,KAAK,QAlBjB,2CAAH,sDAsBrB,SAAe3B,EAAtB,+CAAO,OAAP,oBAAO,WAA4BJ,GAA5B,2FACkBe,EAAAA,EAAAA,IAAA,iBACXf,EADW,sEAC0DgB,IAF5E,uBACGE,EADH,EACGA,KAGFpB,EAAUoB,EAAKc,KAAKxB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAb,MAAiC,CAC7DF,GAAAA,EACAC,KAAAA,EACAC,aAAciB,EAAUjB,GAHI,IAJzB,kBASEb,GATF,kEAYA,SAAemC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BjC,GAA/B,2FACkBe,EAAAA,EAAAA,IAAA,iBACXf,EADW,kDACsCgB,IAFxD,uBACGE,EADH,EACGA,KAGFgB,EAAUhB,EAAKE,QAAQZ,KAAI,kBAA8B,CAC7DC,GAD+B,EAAGA,GAElC0B,OAF+B,EAAOA,OAGtCC,QAH+B,EAAeA,QAAf,IAJ5B,kBASEF,GATF,kEAYA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,2FACkBvB,EAAAA,EAAAA,IAAA,8BACEuB,EADF,8DAC6DtB,IAF/E,uBACGE,EADH,EACGA,KAGFC,EAASD,EAAKE,QAAQZ,KAAI,kBAA6B,CAC3DC,GAD8B,EAAGA,GAEjCY,eAF8B,EAAOA,eAAP,IAIhChB,QAAQC,IAAIa,GARP,kBASEA,GATF,kEAYP,IAAMS,EAAY,SAAAW,GAAG,OACnBA,EAAM,kCAAoCA,EAAMC,CAD7B,C","sources":["components/Cast/Cast.js","services/Api-Service.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/Api-Service';\n\nconst Cast = () => {\n  // const [isLoading, setIsLoading] = useState(false);\n  const [credits, setCredits] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const getCredits = async movieId => {\n      try {\n        // setIsLoading(true);\n        const credits = await getMovieCast(movieId);\n        setCredits(credits);\n        console.log(credits);\n        // setError('');\n      } catch (error) {\n        // setError('Oops. Something went wrong');\n      } finally {\n        // setIsLoading(false);\n      }\n    };\n    getCredits(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {credits.length === 0 && <h2>We don't have info about casts</h2>}\n      {credits && (\n        <ul>\n          {credits.map(({ id, name, profile_path }) => {\n            return (\n              <li key={id}>\n                <img src={profile_path} alt={name} width=\"300\" />\n                <p>{name}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport defaultImg from '../img/default.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '12a1c9f7c08bf08c5c3c451723bbd88a';\n\nexport async function getTrending() {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport const getMovieDetails = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}?language=en-US&api_key=${API_KEY}`\n  );\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n  return {\n    poster_path: getPoster(poster_path),\n    original_title,\n    release_date: release_date.slice(0, 4),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(({ name }) => name).join(', '),\n  };\n};\n\nexport async function getMovieCast(movieId) {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?language=en-US&page=1&include_adult=false&api_key=${API_KEY}`\n  );\n  const credits = data.cast.map(({ id, name, profile_path }) => ({\n    id,\n    name,\n    profile_path: getPoster(profile_path),\n  }));\n  return credits;\n}\n\nexport async function getMovieReviews(movieId) {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?language=en-US&page=1&api_key=${API_KEY}`\n  );\n  const reviews = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n  return reviews;\n}\n\nexport async function getMoviesSearch(query) {\n  const { data } = await axios.get(\n    `/search/movie?query=${query}&language=en-US&page=1&include_adult=false&api_key=${API_KEY}`\n  );\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  console.log(movies);\n  return movies;\n}\n\nconst getPoster = url =>\n  url ? 'https://image.tmdb.org/t/p/w500' + url : defaultImg;\n"],"names":["useState","credits","setCredits","movieId","useParams","useEffect","getCredits","getMovieCast","console","log","length","map","id","name","profile_path","src","alt","width","axios","API_KEY","getTrending","data","movies","results","original_title","getMovieDetails","poster_path","release_date","vote_average","overview","genres","getPoster","slice","toFixed","join","cast","getMovieReviews","reviews","author","content","getMoviesSearch","query","url","defaultImg"],"sourceRoot":""}