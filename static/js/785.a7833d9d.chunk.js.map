{"version":3,"file":"static/js/785.a7833d9d.chunk.js","mappings":"yNAwCA,UApCgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAU,mCAAG,WAAMH,GAAN,iGAEOI,EAAAA,EAAAA,IAAgBJ,GAFvB,OAETF,EAFS,OAGfC,EAAWD,GACXO,QAAQC,IAAIR,GAJG,qJAAH,sDAShBK,EAAWH,EAVS,CAWrB,GAAE,CAACA,KAGF,8BACGF,IACC,wBACGA,EAAQS,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,2BACE,oCAAYD,MACZ,uBAAIC,MAFGF,EAKZ,OAKV,C,wMCnCDG,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,wGACkBF,EAAAA,EAAAA,IAAA,sCAAyCC,IAD3D,uBACGE,EADH,EACGA,KACFC,EAASD,EAAKE,QAAQT,KAAI,kBAA6B,CAC3DC,GAD8B,EAAGA,GAEjCS,eAF8B,EAAOA,eAAP,IAF3B,kBAMEF,GANF,kEASA,IAAMG,EAAe,mCAAG,WAAMlB,GAAN,qGACNW,EAAAA,EAAAA,IAAA,iBACXX,EADW,mCACuBY,IAFjB,uBACrBE,EADqB,EACrBA,KAINK,EAMEL,EANFK,YACAF,EAKEH,EALFG,eACAG,EAIEN,EAJFM,aACAC,EAGEP,EAHFO,aACAC,EAEER,EAFFQ,SACAC,EACET,EADFS,OAV2B,kBAYtB,CACLJ,YAAaK,EAAUL,GACvBF,eAAAA,EACAG,aAAcA,EAAaK,MAAM,EAAG,GACpCJ,aAAcA,EAAaK,QAAQ,GACnCJ,SAAAA,EACAC,OAAQA,EAAOhB,KAAI,qBAAGoB,IAAH,IAAoBC,KAAK,QAlBjB,2CAAH,sDAsBrB,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4B7B,GAA5B,2FACkBW,EAAAA,EAAAA,IAAA,iBACXX,EADW,sEAC0DY,IAF5E,uBACGE,EADH,EACGA,KAGFgB,EAAUhB,EAAKiB,KAAKxB,KAAI,gBAAGC,EAAH,EAAGA,GAAImB,EAAP,EAAOA,KAAMK,EAAb,EAAaA,aAAb,MAAiC,CAC7DxB,GAAAA,EACAmB,KAAAA,EACAK,aAAcR,EAAUQ,GAHI,IAJzB,kBASEF,GATF,kEAYA,SAAe1B,EAAtB,+CAAO,OAAP,oBAAO,WAA+BJ,GAA/B,2FACkBW,EAAAA,EAAAA,IAAA,iBACXX,EADW,kDACsCY,IAFxD,uBACGE,EADH,EACGA,KAGFhB,EAAUgB,EAAKE,QAAQT,KAAI,kBAA8B,CAC7DC,GAD+B,EAAGA,GAElCC,OAF+B,EAAOA,OAGtCC,QAH+B,EAAeA,QAAf,IAJ5B,kBASEZ,GATF,kEAYA,SAAemC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,2FACkBvB,EAAAA,EAAAA,IAAA,8BACEuB,EADF,8DAC6DtB,IAF/E,uBACGE,EADH,EACGA,KAGFC,EAASD,EAAKE,QAAQT,KAAI,kBAA6B,CAC3DC,GAD8B,EAAGA,GAEjCS,eAF8B,EAAOA,eAAP,IAIhCZ,QAAQC,IAAIS,GARP,kBASEA,GATF,kEAYP,IAAMS,EAAY,SAAAW,GAAG,OACnBA,EAAM,kCAAoCA,EAAMC,CAD7B,C","sources":["components/Reviews/Reviews.js","services/Api-Service.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/Api-Service';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    const getReviews = async movieId => {\n      try {\n        const reviews = await getMovieReviews(movieId);\n        setReviews(reviews);\n        console.log(reviews);\n      } catch (error) {\n      } finally {\n      }\n    };\n    getReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews && (\n        <ul>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <p>Author: {author}</p>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport defaultImg from '../img/default.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '12a1c9f7c08bf08c5c3c451723bbd88a';\n\nexport async function getTrending() {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport const getMovieDetails = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}?language=en-US&api_key=${API_KEY}`\n  );\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n  return {\n    poster_path: getPoster(poster_path),\n    original_title,\n    release_date: release_date.slice(0, 4),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(({ name }) => name).join(', '),\n  };\n};\n\nexport async function getMovieCast(movieId) {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?language=en-US&page=1&include_adult=false&api_key=${API_KEY}`\n  );\n  const credits = data.cast.map(({ id, name, profile_path }) => ({\n    id,\n    name,\n    profile_path: getPoster(profile_path),\n  }));\n  return credits;\n}\n\nexport async function getMovieReviews(movieId) {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?language=en-US&page=1&api_key=${API_KEY}`\n  );\n  const reviews = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n  return reviews;\n}\n\nexport async function getMoviesSearch(query) {\n  const { data } = await axios.get(\n    `/search/movie?query=${query}&language=en-US&page=1&include_adult=false&api_key=${API_KEY}`\n  );\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  console.log(movies);\n  return movies;\n}\n\nconst getPoster = url =>\n  url ? 'https://image.tmdb.org/t/p/w500' + url : defaultImg;\n"],"names":["useState","reviews","setReviews","movieId","useParams","useEffect","getReviews","getMovieReviews","console","log","map","id","author","content","axios","API_KEY","getTrending","data","movies","results","original_title","getMovieDetails","poster_path","release_date","vote_average","overview","genres","getPoster","slice","toFixed","name","join","getMovieCast","credits","cast","profile_path","getMoviesSearch","query","url","defaultImg"],"sourceRoot":""}