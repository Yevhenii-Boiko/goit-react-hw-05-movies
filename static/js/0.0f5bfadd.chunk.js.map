{"version":3,"file":"static/js/0.0f5bfadd.chunk.js","mappings":"oLAEaA,E,QAAaC,GAAAA,EAAH,0F,yKCoBvB,EAnB2B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,iCACE,4CACA,wBACGF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,iBAAYF,GAAMG,MAAO,CAAEC,KAAMP,GAAzC,UACE,SAAC,IAAD,UAAaI,OAFRD,EADC,QAUnB,ECED,EAlBa,WACX,OAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOT,EAAP,KAAeU,EAAf,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAEKC,EAAAA,EAAAA,MAFL,OAERC,EAFQ,OAGdJ,EAAUI,GAHI,gJAAH,qDAQfF,GACD,GAAE,KAEI,SAACG,EAAD,CAAoBf,OAAQA,GACpC,C,6MCjBDgB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAET,SAAeJ,IAAtB,4CAAO,OAAP,oBAAO,wGACkBG,EAAAA,EAAAA,IAAA,sCAAyCC,IAD3D,uBACGH,EADH,EACGA,KACFd,EAASc,EAAKI,QAAQf,KAAI,kBAA6B,CAC3DC,GAD8B,EAAGA,GAEjCC,eAF8B,EAAOA,eAAP,IAF3B,kBAMEL,GANF,kEASA,IAAMmB,EAAe,mCAAG,WAAMC,GAAN,qGACNJ,EAAAA,EAAAA,IAAA,iBACXI,EADW,mCACuBH,IAFjB,uBACrBH,EADqB,EACrBA,KAINO,EAMEP,EANFO,YACAhB,EAKES,EALFT,eACAiB,EAIER,EAJFQ,aACAC,EAGET,EAHFS,aACAC,EAEEV,EAFFU,SACAC,EACEX,EADFW,OAV2B,kBAYtB,CACLJ,YAAaK,EAAUL,GACvBhB,eAAAA,EACAiB,aAAcA,EAAaK,MAAM,EAAG,GACpCJ,aAAcA,EAAaK,QAAQ,GACnCJ,SAAAA,EACAC,OAAQA,EAAOtB,KAAI,qBAAG0B,IAAH,IAAoBC,KAAK,QAlBjB,2CAAH,sDAsBrB,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BX,GAA5B,2FACkBJ,EAAAA,EAAAA,IAAA,iBACXI,EADW,sEAC0DH,IAF5E,uBACGH,EADH,EACGA,KAGFkB,EAAUlB,EAAKmB,KAAK9B,KAAI,gBAAGC,EAAH,EAAGA,GAAIyB,EAAP,EAAOA,KAAMK,EAAb,EAAaA,aAAb,MAAiC,CAC7D9B,GAAAA,EACAyB,KAAAA,EACAK,aAAcR,EAAUQ,GAHI,IAJzB,kBASEF,GATF,kEAYA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+Bf,GAA/B,2FACkBJ,EAAAA,EAAAA,IAAA,iBACXI,EADW,kDACsCH,IAFxD,uBACGH,EADH,EACGA,KAGFsB,EAAUtB,EAAKI,QAAQf,KAAI,kBAA8B,CAC7DC,GAD+B,EAAGA,GAElCiC,OAF+B,EAAOA,OAGtCC,QAH+B,EAAeA,QAAf,IAJ5B,kBASEF,GATF,kEAYA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,2FACkBxB,EAAAA,EAAAA,IAAA,8BACEwB,EADF,8DAC6DvB,IAF/E,uBACGH,EADH,EACGA,KAGFd,EAASc,EAAKI,QAAQf,KAAI,kBAA6B,CAC3DC,GAD8B,EAAGA,GAEjCC,eAF8B,EAAOA,eAAP,IAJ3B,kBAQEL,GARF,kEAWP,IAAM0B,EAAY,SAAAe,GAAG,OACnBA,EAAM,kCAAoCA,EAAMC,CAD7B,C","sources":["components/SearchList/SearchList.styled.js","components/TrendingMovies/TrendingMovies.js","pages/Home.js","services/Api-Service.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieTitle = styled.p`\n  font-size: 20px;\n  margin-top: 20px;\n  text-decoration: none;\n`;\n","import { MovieTitle } from 'components/SearchList/SearchList.styled';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst TrendingMoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <h2>Trending today</h2>\n      <ul>\n        {movies.map(({ id, original_title }) => (\n          <li key={id}>\n            <Link to={`movies/${id}`} state={{ from: location }}>\n              <MovieTitle>{original_title}</MovieTitle>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default TrendingMoviesList;\n","import { useEffect, useState } from 'react';\nimport { getTrending } from 'services/Api-Service';\nimport TrendingMoviesList from 'components/TrendingMovies/TrendingMovies';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const getMovies = async () => {\n      try {\n        const data = await getTrending();\n        setMovies(data);\n      } catch (error) {\n      } finally {\n      }\n    };\n    getMovies();\n  }, []);\n\n  return <TrendingMoviesList movies={movies} />;\n};\n\nexport default Home;\n","import axios from 'axios';\nimport defaultImg from '../img/default.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '12a1c9f7c08bf08c5c3c451723bbd88a';\n\nexport async function getTrending() {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport const getMovieDetails = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}?language=en-US&api_key=${API_KEY}`\n  );\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n  return {\n    poster_path: getPoster(poster_path),\n    original_title,\n    release_date: release_date.slice(0, 4),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(({ name }) => name).join(', '),\n  };\n};\n\nexport async function getMovieCast(movieId) {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?language=en-US&page=1&include_adult=false&api_key=${API_KEY}`\n  );\n  const credits = data.cast.map(({ id, name, profile_path }) => ({\n    id,\n    name,\n    profile_path: getPoster(profile_path),\n  }));\n  return credits;\n}\n\nexport async function getMovieReviews(movieId) {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?language=en-US&page=1&api_key=${API_KEY}`\n  );\n  const reviews = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n  return reviews;\n}\n\nexport async function getMoviesSearch(query) {\n  const { data } = await axios.get(\n    `/search/movie?query=${query}&language=en-US&page=1&include_adult=false&api_key=${API_KEY}`\n  );\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nconst getPoster = url =>\n  url ? 'https://image.tmdb.org/t/p/w500' + url : defaultImg;\n"],"names":["MovieTitle","styled","movies","location","useLocation","map","id","original_title","to","state","from","useState","setMovies","useEffect","getMovies","getTrending","data","TrendingMovies","axios","API_KEY","results","getMovieDetails","movieId","poster_path","release_date","vote_average","overview","genres","getPoster","slice","toFixed","name","join","getMovieCast","credits","cast","profile_path","getMovieReviews","reviews","author","content","getMoviesSearch","query","url","defaultImg"],"sourceRoot":""}